// use a mover to lift a player could be better?
// nah it's not possible
global function MpAbilityGravityLift_Init
global function OnWeaponTossReleaseAnimEvent_ability_gravity_lift
global function OnProjectileCollision_ability_gravity_lift

// Gravity Lift
const float LIFT_THROW_POWER_SCALE = 0.3
const float LIFT_HEIGHT = 1280
const float LIFT_TOP_HEIGHT = 100
const float LIFT_RADIUS = 120
const float LIFT_RISE_SPEED = 325
const float LIFT_HORIZONTAL_MOVE_SPEED = 225
const float LIFT_AIR_ACCELERATION = 3000 // higher for better control
const float LIFT_PULL_SPEED_HORIZON = 350
const float LIFT_PULL_SPEED_VERTICAl = 340
const float LIFT_TOP_TIME_LIMIT = 2
const float LIFT_LIFETIME = 10
const float LIFT_COOLDOWN = 0.0 // 0.5 // time between second lift, I guess it's no need for titanfall?
const float LIFT_MAX_LIFETIME_EXTEND = 1.5 // cap to 1.5x lifetime

// classname checks
const bool LIFT_ALLOW_HEAVYARMOR = false
const array<string> LIFT_ALLOWED_CLASSES =
[
	// player
	"player",
	// npc
	"npc_soldier",
	"npc_stalker",
	"npc_spectre",
	"npc_prowler",
	"npc_marvin",
	"npc_pilot_elite",
	// projectile
	"grenade",
	// prop
	"prop_physics",
]

// inspired by flowstate space elevator!
const bool USE_HARVESTER_BEAM = false // lift beam variant
const asset LIFT_SEGMENT_FX = $"P_s2s_flap_wind"
const asset LIFT_BOTTOM_FX = $"harvester_base_glowflat"

struct
{
	table<entity, bool> entReachedGravLiftTop // marking entities as reached lift top
	table< entity, array<entity> > entInGravLifts // for handling multiple gravlifts!
	table<entity, entity> liftLinkedTrigger // saving top & lift trigger
} file

void function MpAbilityGravityLift_Init()
{
	#if SERVER
		// inspired by flowstate script
		PrecacheParticleSystem( LIFT_SEGMENT_FX )
		PrecacheParticleSystem( LIFT_BOTTOM_FX )

		// add to some modifiers
		Grenade_AddCookDisabledMod( "gravity_lift" )
		Grenade_AddDropOnDeathDisabledMod( "gravity_lift" )

		RegisterSignal( "EnterGravityLift" )
		RegisterSignal( "LeaveGravityLift" )
	#endif
}


var function OnWeaponTossReleaseAnimEvent_ability_gravity_lift( entity weapon, WeaponPrimaryAttackParams attackParams )
{
	entity projectile = ThrowDeployable( weapon, attackParams, LIFT_THROW_POWER_SCALE, OnGravityLiftDeployed ) // less vec?
	// fix sound!
	string fpSound = string ( GetGrenadeThrowSound_1p( weapon ) )
	string tpSound = string ( GetGrenadeThrowSound_3p( weapon ) )
	weapon.EmitWeaponSound_1p3p( fpSound, tpSound )
	if ( projectile )
	{
		#if SERVER
			thread WaitForGravLiftDeployment( weapon, projectile )
			// manage weapon cooldown
			thread GravLiftWeaponCooldown( weapon, projectile )
		#endif
	}

	return weapon.GetWeaponSettingInt( eWeaponVar.ammo_per_shot )
}

#if SERVER
void function WaitForGravLiftDeployment( entity weapon, entity projectile )
{
	weapon.EndSignal( "OnDestroy" )
    projectile.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function(): ( weapon, projectile )
		{
			if ( !IsValid( weapon ) )
			{
				if ( IsValid( projectile ) )
					projectile.Destroy() // if weapon has been destroyed after deployment, destroy the projectile
			}
		}
	)

    projectile.WaitSignal( "Planted" )
}

void function GravLiftWeaponCooldown( entity weapon, entity projectile )
{
	weapon.EndSignal( "OnDestroy" )
	weapon.AddMod( "no_regen" ) // stop regen!

	// wait for projectile being destroyed
	projectile.WaitSignal( "OnDestroy" )
	weapon.RemoveMod( "no_regen" )
}
#endif

void function OnProjectileCollision_ability_gravity_lift( entity projectile, vector pos, vector normal, entity hitEnt, int hitbox, bool isCritical )
{
	#if SERVER
		entity owner = projectile.GetOwner()
		if( !IsAlive( owner ) )
		{
			if( IsValid( projectile ) ) // don't let a useless shuriken stay on ground
			{
				projectile.Destroy()
				return
			}
		}
	#endif

	OnProjectileCollision_weapon_deployable( projectile, pos, normal, hitEnt, hitbox, isCritical )
}

void function OnGravityLiftDeployed( entity projectile )
{
	#if SERVER
	thread GravityLiftThink( projectile )

	// now using a new check!
	//thread GravityLiftThink( projectile )
	#endif
}

#if SERVER
void function GravityLiftThink( entity projectile )
{
	projectile.Hide() // don't show the shuriken to player
	EmitSoundOnEntity( projectile, "default_gravitystar_impact_3p" )

	array<entity> liftEffects
	if ( USE_HARVESTER_BEAM )
	{
		entity gravLiftBeam = StartParticleEffectOnEntity_ReturnEntity( projectile, GetParticleSystemIndex( FX_HARVESTER_BEAM ), FX_PATTACH_ABSORIGIN_FOLLOW, 0 )
		gravLiftBeam.DisableHibernation() // prevent it from fading out( will leave a red destroyed beam! )
		gravLiftBeam.SetStopType( "DestroyImmediately" )
		EffectSetControlPointVector( gravLiftBeam, 1, < 0,100,255 > ) // purly blue
		liftEffects.append( gravLiftBeam )
	}
	else // inspired by flowstate script
	{
		vector pos = projectile.GetOrigin()
		entity bottomFX = PlayFX( LIFT_BOTTOM_FX, pos + < 0, 0, -20 >, < -90, 0, 0 > )
		EffectSetControlPointVector( bottomFX, 1, < 0,100,255 > ) // purly blue
		liftEffects.append( bottomFX )
		for ( int i = 0; i <= LIFT_HEIGHT; i += 128 )
		{
			entity segmentFX = PlayFX( LIFT_SEGMENT_FX, pos + < 0, 0, i >, < -90, 0, 0 > )
			//EmitSoundOnEntity( segmentFX, "amb_emit_s2s_rushing_wind_v1_01" )
			liftEffects.append( segmentFX )
		}
	}

	// setup trigger
	array<entity> liftTriggers

	entity liftTrigger = CreateEntity( "trigger_cylinder" )
	liftTrigger.SetRadius( LIFT_RADIUS )
	liftTrigger.SetAboveHeight( LIFT_HEIGHT )
	liftTrigger.SetBelowHeight( -1 )
	liftTrigger.SetOrigin( projectile.GetOrigin() )

	liftTrigger.SetEnterCallback( OnGravityLiftTriggerEnter )
	liftTrigger.SetLeaveCallback( OnGravityLiftTriggerLeave )
	DispatchSpawn( liftTrigger )
	liftTriggers.append( liftTrigger )

	// top trigger
	entity topTrigger = CreateEntity( "trigger_cylinder" )
	topTrigger.SetRadius( LIFT_RADIUS )
	topTrigger.SetAboveHeight( LIFT_TOP_HEIGHT )
	topTrigger.SetBelowHeight( 0 )
	float topOffset = LIFT_HEIGHT - LIFT_TOP_HEIGHT
	topTrigger.SetOrigin( projectile.GetOrigin() + < 0, 0, topOffset > )

	topTrigger.SetEnterCallback( OnGravityLiftTopEnter )
	topTrigger.SetLeaveCallback( OnGravityLiftTopLeave )
	DispatchSpawn( topTrigger )
	liftTriggers.append( topTrigger )

	// binding together
	file.liftLinkedTrigger[ liftTrigger ] <- topTrigger
	file.liftLinkedTrigger[ topTrigger ] <- liftTrigger

	// search for entities that already in trigger
	liftTrigger.SearchForNewTouchingEntity()
	topTrigger.SearchForNewTouchingEntity()

	thread GravityLiftLifeTime( projectile, liftTriggers, liftEffects )
}

void function GravityLiftLifeTime( entity projectile, array<entity> liftTriggers, array<entity> liftEffects )
{
	projectile.EndSignal( "OnDestroy" )
	foreach ( entity trigger in liftTriggers )
		trigger.EndSignal( "OnDestroy" ) // we end the thread when one of the trigger is destroyed
	//gravLiftBeam.EndSignal( "OnDestroy" )

	OnThreadEnd(
		function(): ( projectile, liftTriggers, liftEffects )
		{
			// this handles IsValid() checks
			DestroyGravityLift( projectile, liftTriggers, liftEffects )
		}
	)

	float endTime = Time() + LIFT_LIFETIME
	float maxEndTime = Time() + ( LIFT_LIFETIME * LIFT_MAX_LIFETIME_EXTEND ) // for players staying on it, it will try it's best to keep alive
	while ( true )
	{
		array<entity> inLiftEntities
		foreach ( entity trigger in liftTriggers )
			inLiftEntities.extend( trigger.GetTouchingEntities() )
		array<entity> inLiftPlayers
		foreach ( entity ent in inLiftEntities )
		{
			if ( !IsValid( ent ) ) // this could happen!
				continue
			if ( ent.IsPlayer() )
				inLiftPlayers.append( ent )
		}

		// reached lifetime with no players inside
		if ( Time() > endTime && inLiftPlayers.len() == 0 )
			break
		// reached lifetime with players inside, will keep lifting for a extra short period
		else if( Time() > maxEndTime )
			break

		WaitFrame()
	}
}

void function DestroyGravityLift( entity projectile, array<entity> liftTriggers, array<entity> liftEffects )
{
	foreach ( entity fx in liftEffects )
	{
		if( IsValid( fx ) )
			EffectStop( fx )
	}

	if( IsValid( projectile ) )
		projectile.Destroy()

	foreach ( entity trigger in liftTriggers )
	{
		if( IsValid( trigger ) )
			trigger.Destroy()
	}
}

bool function EntityAllowedToTriggerGravLift( entity ent )
{
	if ( !IsValid( ent ) )
		return false

	// only affects pilots, npcs, prop_physics and grenades
	if ( !LIFT_ALLOW_HEAVYARMOR && ent.GetArmorType() == ARMOR_TYPE_HEAVY )
		return false
	string className = ent.GetClassName()
	if ( !LIFT_ALLOWED_CLASSES.contains( className ) )
		return false

	// all checks passed
	return true
}

void function InitGravLiftEntity( entity ent )
{
	if ( !( ent in file.entReachedGravLiftTop ) )
		file.entReachedGravLiftTop[ ent ] <- false
	if ( !( ent in file.entInGravLifts ) )
		file.entInGravLifts[ ent ] <- []

	ArrayRemoveInvalid( file.entInGravLifts[ ent ] )
}

int function GetEntityInGravLiftCount( entity ent )
{
	if ( !( ent in file.entInGravLifts ) )
		return 0
	return file.entInGravLifts[ ent ].len()
}

void function SetEntEnterGravLift( entity ent, entity liftTrigger )
{
	ArrayRemoveInvalid( file.entInGravLifts[ ent ] )
	file.entInGravLifts[ ent ].append( liftTrigger )
}

void function SetEntLeaveGravLift( entity ent, entity liftTrigger )
{
	ArrayRemoveInvalid( file.entInGravLifts[ ent ] )
	file.entInGravLifts[ ent ].removebyvalue( liftTrigger )
}

bool function IsEntInGravLift( entity ent, entity liftTrigger )
{
	return file.entInGravLifts[ ent ].contains( liftTrigger )
}

void function OnGravityLiftTriggerEnter( entity trigger, entity ent )
{
	if ( !EntityAllowedToTriggerGravLift( ent ) ) // generic check
		return
	InitGravLiftEntity( ent ) // init

	bool firstEnterLift = true
	if ( GetEntityInGravLiftCount( ent ) > 0 ) // not first lift
		firstEnterLift = false

	if ( firstEnterLift )
		ent.Signal( "EnterGravityLift" ) // this will end other gravlifts

	SetEntEnterGravLift( ent, trigger )
	thread EntityInGravityLift( ent, trigger )
}

void function OnGravityLiftTriggerLeave( entity trigger, entity ent )
{
	if ( !EntityAllowedToTriggerGravLift( ent ) ) // generic check
		return
	InitGravLiftEntity( ent ) // init

	if ( !IsEntInGravLift( ent, trigger ) ) // ent has been removed from trigger!
		return

	if ( GetEntityInGravLiftCount( ent ) == 0 ) // no lift valid!
		return

	bool shouldEndLift = true
	if ( GetEntityInGravLiftCount( ent ) > 1 ) // still have other lifts left
		shouldEndLift = false
	
	if ( shouldEndLift )
	{
		ent.Signal( "LeaveGravityLift" ) // this will end other gravlifts
		if ( ent.IsPlayer() ) // restore settings for player
			RestorePlayerSavedSettings( ent )
	}

	SetEntLeaveGravLift( ent, trigger )
}

bool function RestorePlayerSavedSettings( entity player )
{
	RestorePlayerPermanentGravity( player )
	RestorePlayerPermanentAirAcceleration( player )
	RestorePlayerPermanentAirSpeed( player )
	RestorePlayerPermanentGroundFriction( player )
	return true
}

void function OnGravityLiftTopEnter( entity trigger, entity ent )
{
	if ( !EntityAllowedToTriggerGravLift( ent ) ) // generic check
		return
	InitGravLiftEntity( ent ) // init

	entity linkedTrigger = file.liftLinkedTrigger[ trigger ]
	if ( !IsEntInGravLift( ent, linkedTrigger ) ) // the entity is not in linked trigger!
		return
	file.entReachedGravLiftTop[ ent ] = true // mark as player reached highest
}

void function OnGravityLiftTopLeave( entity trigger, entity ent )
{
	if ( !EntityAllowedToTriggerGravLift( ent ) ) // generic check
		return
	InitGravLiftEntity( ent ) // init

	if ( GetEntityInGravLiftCount( ent ) > 1 ) // still have other lifts left
		return
	file.entReachedGravLiftTop[ ent ] = false // mark as player left highest
}

void function EntityInGravityLift( entity ent, entity trigger )
{
	trigger.EndSignal( "OnDestroy" )
	ent.EndSignal( "OnDestroy" )
	if ( ent.IsPlayer() || ent.IsNPC() ) // these entities may die
		ent.EndSignal( "OnDeath" )
	ent.EndSignal( "EnterGravityLift" )
	ent.EndSignal( "LeaveGravityLift" )

	int visualStatusEffect = -1
	if ( ent.IsPlayer() ) // add a bit visual effect for player
		visualStatusEffect = StatusEffect_AddEndless( ent, eStatusEffect.emp, 0.05 )

	table storedStats = 
	{
		gravity = float( ent.kv.gravity ) // npc specific
		lastTickVel = < 0, 0, 0 > // player specific
	}

	table results = {} // save some behaviors
	results.bouncedFromLift <- false // bool, to get if the entity is leaving the lift manually or being bounced away

	OnThreadEnd(
		function(): ( ent, trigger, visualStatusEffect, storedStats, results )
		{
			if ( IsValid( ent ) ) // any valid ent should be restore gravity or someother keyvalues
			{
				// player specifics
				if ( ent.IsPlayer() ) 
				{
					if ( visualStatusEffect > -1 )
						StatusEffect_Stop( ent, visualStatusEffect )

					ent.UnforceStand()
					ent.TouchGround() // restore one doublejump!
					StopSoundOnEntity( ent, "titan_flight_hover_3p" ) // clear existing sound
				}
				else // npcs
					ent.kv.gravity = storedStats.gravity
			}
			if ( IsAlive( ent ) ) // only living ent will be push away
			{
				if ( GetEntityInGravLiftCount( ent ) > 1 ) // still having other gravlifts!
					return // don't bounce

				// consider this means the entity is force bounced away, trigger caused them being force bounced, or trigger reached max duration
				if ( !ent.IsPlayer() || results.bouncedFromLift || !IsValid( trigger ) ) 
					BounceEntityForward( ent )
				else
					BouncePlayerFromLift( ent, expect vector( storedStats.lastTickVel ) ) // last tick's velocity can mostly get player's move direction
			
				if ( results.bouncedFromLift ) // remove entity from current trigger if it's force bounced!
				{
					if ( IsValid( trigger ) )
						SetEntLeaveGravLift( ent, trigger )
					if ( ent.IsPlayer() ) // restore settings for player
						RestorePlayerSavedSettings( ent )
				}
			}
		}
	)

	float liftRequiedHighet = trigger.GetOrigin().z + ( LIFT_HEIGHT - LIFT_TOP_HEIGHT )
	while ( ent.GetOrigin().z > liftRequiedHighet ) // wait until entity actually in lift
	{
		print( "ent.GetOrigin().z: " + string( ent.GetOrigin().z ) )
		print( "liftRequiedHighet: " + string( liftRequiedHighet ) )
		WaitFrame()
	}

	bool reachedHighest = false
	float reachHighestTime // for saving reach highest part's time

	// player lifting specific
	if ( ent.IsPlayer() )
	{
		StopSoundOnEntity( ent, "titan_flight_hover_3p" ) // clear existing sound
		EmitSoundOnEntity( ent, "titan_flight_hover_3p" )
	}

	bool firstLoop = true
	while( true ) // start lifting entity
	{
		if ( !firstLoop )
			firstLoop = false
		else
			WaitFrame()

		if ( !reachedHighest && file.entReachedGravLiftTop[ ent ] ) // last tick wasn't reach highest
		{
			reachedHighest = true
			reachHighestTime = Time()
		}

		// keep updating velocity
		if ( ent.IsPlayer() )
		{
			storedStats.lastTickVel = ent.GetVelocity()
			// player specific settings
			ent.kv.airSpeed = LIFT_HORIZONTAL_MOVE_SPEED
			ent.kv.airAcceleration = LIFT_AIR_ACCELERATION
			ent.SetGroundFrictionScale( 0.0 )
		}

		//bool shouldLiftEnt = true
		// check if we need to lift the ent
		if ( ent.IsPlayer() )
		{
			//print( GetEntityInGravLiftCount( ent ) )
			// don't lift wallrunning/wallhanging/wallclimbing/ziplining players
			if ( ent.IsWallRunning() || ent.IsWallHanging() || ent.IsTraversing() || ent.IsZiplining() )
				continue
		}
		if ( IsValid( ent.GetParent() ) ) // has a parent
			continue

		// lift the entity
		ent.kv.gravity = 0.0001 // never uses 0.0, it means default gravity
		vector airSpeed = ent.GetVelocity() //GetEntityGravLiftVelocity( ent, LIFT_HORIZONTAL_MOVE_SPEED )
		airSpeed.z = reachedHighest ? 0.0 : LIFT_RISE_SPEED

		if ( ent.IsPlayer() && PlayerNotDoingInput( ent ) ) // not doing any input, we take 2 ticks to fully stop player, so they can feel better controlling
			airSpeed = GainVelocityHorizontal( airSpeed, -( LIFT_HORIZONTAL_MOVE_SPEED * 0.5 ), 0.0 ) //RemoveVelocityHorizonal( airSpeed )
		else
			airSpeed = LimitVelocityHorizontal( airSpeed, LIFT_HORIZONTAL_MOVE_SPEED )
		ent.SetVelocity( airSpeed )

		if ( reachedHighest ) // reached highest!
		{
			if ( Time() > reachHighestTime + LIFT_TOP_TIME_LIMIT ) // more than limit!
			{
				if ( GetEntityInGravLiftCount( ent ) > 1 ) // still having other gravlifts! )
					continue
				results.bouncedFromLift = true // consider as force bounced away!
				break // end the loop
			}
		}

		// movement limiter
		if ( ent.IsPlayer() )
		{
			ent.ForceStand() // force player to stand
			ent.ConsumeDoubleJump() // don't let players doublejump
			if ( ent.IsTraversing() ) // is mantling or traversing?
				ent.ClearTraverse()
			FindNearestSafeSpotAndPutEntity( ent, 1 ) // always try to protect players from stucking
		}
	}
}

vector function LimitVelocityHorizontal( vector vel, float speed )
{
	vector horzVel = <vel.x, vel.y, 0>
	if ( Length( horzVel ) <= speed )
		return vel

	horzVel = Normalize( horzVel )
	horzVel *= speed
	vel.x = horzVel.x
	vel.y = horzVel.y
	return vel
}

vector function RemoveVelocityHorizonal( vector vel )
{
    vector horzVel = <vel.x, vel.y, 0>

    float speed = 0.0
	horzVel = Normalize( horzVel )
	horzVel *= speed
	vel.x = horzVel.x
	vel.y = horzVel.y
	return vel
}

vector function GainVelocityHorizontal( vector vel, float speedGain, float minSpeed = 1.0 ) // min speed should never be 0
{
    vector horzVel = <vel.x, vel.y, 0>

    float speed = max( minSpeed, Length( horzVel ) + speedGain )
	horzVel = Normalize( horzVel )
	horzVel *= speed
	vel.x = horzVel.x
	vel.y = horzVel.y
	return vel
}

bool function PlayerNotDoingInput( entity player )
{
	vector inputVec = GetPlayerVelocityFromInput( player, 1 )
    vector inputAngs = VectorToAngles( inputVec )
    inputAngs.x = 0
    inputAngs.y -= 180
    //print( inputAngs )
	return inputAngs.x == 0 && inputAngs.y == 0
}

void function BouncePlayerFromLift( entity player, vector lastTickVel ) // last tick's velocity can mostly get player's move direction
{
	vector airSpeed = GetPlayerHorizontalSpeedForced( lastTickVel, LIFT_PULL_SPEED_HORIZON )
	airSpeed.z = LIFT_PULL_SPEED_VERTICAl
	player.SetVelocity( airSpeed )
}

vector function GetPlayerHorizontalSpeedForced( vector moveVel, float speed )
{
	vector horzVel = <moveVel.x, moveVel.y, 0>

	horzVel = Normalize( horzVel )
	horzVel *= speed
	moveVel.x = horzVel.x
	moveVel.y = horzVel.y

	return moveVel
}

void function BounceEntityForward( entity ent )
{
	vector airSpeed
	if ( ent.IsPlayer() ) // player specifics
	{
		vector playerAngles = ent.EyeAngles()
		vector forward = AnglesToForward( < 0, playerAngles.y, 0 > ) // yaw only
		airSpeed = forward * LIFT_PULL_SPEED_HORIZON
		airSpeed.z = LIFT_PULL_SPEED_VERTICAl
	}
	else
	{
		airSpeed = ent.GetForwardVector() * LIFT_PULL_SPEED_HORIZON
		airSpeed.z = LIFT_PULL_SPEED_VERTICAl
	}

	ent.SetVelocity( airSpeed )
}

/* // unused, pretty bad to control
void function BounceEntityFromLift( entity ent )
{
	vector airSpeed = GetEntityGravLiftVelocity( ent, 1 ) * LIFT_PULL_SPEED_HORIZON
	airSpeed.z = LIFT_PULL_SPEED_VERTICAl
	ent.SetVelocity( airSpeed )
}

vector function GetEntityGravLiftVelocity( entity ent, float speed )
{
	if ( ent.IsPlayer() ) // for players, get their input!
		return GetPlayerVelocityFromInput( ent, speed )

	// other conditions
	return ent.GetUpVector() * speed
}
*/

vector function GetPlayerVelocityFromInput( entity player, float speed )
{
	vector angles = player.EyeAngles()
	float xAxis = player.GetInputAxisRight()
	float yAxis = player.GetInputAxisForward()
	vector directionForward = GetDirectionFromInput( angles, xAxis, yAxis )

	return directionForward * speed
}

vector function GetDirectionFromInput( vector playerAngles, float xAxis, float yAxis )
{
	playerAngles.x = 0
	playerAngles.z = 0
	vector forward = AnglesToForward( playerAngles )
	vector right = AnglesToRight( playerAngles )

	vector directionVec = Vector(0,0,0)
	directionVec += right * xAxis
	directionVec += forward * yAxis

	vector directionAngles = VectorToAngles( directionVec )
	vector directionForward = AnglesToForward( directionAngles )

	return directionForward
}
#endif