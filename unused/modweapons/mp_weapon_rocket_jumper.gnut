
global function ModdedRocketJumper_Init

// not handle by "impulse_force" keyvalue
const float SCALEPUSH_SOFTBALL = 1.1
const float SCALEPUSH_EPG = 1.5
const float SCALEPUSH_COLDWAR = 1.0
const float SCALEPUSH_SMR = 1.3

const float PUSH_RADIUS = 450

void function ModdedRocketJumper_Init()
{
    #if SERVER
        AddDamageCallbackSourceID( eDamageSourceId.mp_weapon_softball, OnDamagedTarget_RocketJumper )
        AddDamageCallbackSourceID( eDamageSourceId.mp_weapon_epg, OnDamagedTarget_RocketJumper )
        AddDamageCallbackSourceID( eDamageSourceId.mp_weapon_pulse_lmg, OnDamagedTarget_RocketJumper )
        AddDamageCallbackSourceID( eDamageSourceId.mp_weapon_smr, OnDamagedTarget_RocketJumper )

        RegisterSignal( "RocketJumperVisual" ) // for playing fx
    #endif
}

#if SERVER
void function OnDamagedTarget_RocketJumper( entity ent, var damageInfo )
{
	if ( !IsValid( ent ) )
		return

	entity attacker = DamageInfo_GetAttacker( damageInfo )

	if ( !IsValid( attacker ) )
		return

	entity inflictor = DamageInfo_GetInflictor( damageInfo )
	if( !IsValid( inflictor ) )
		return
	if( !inflictor.IsProjectile() )
		return

    array<string> mods = inflictor.ProjectileGetMods()
    if( !mods.contains( "rocket_jumper" ) )
        return // no jumper mod!

    vector forceVec = DamageInfo_GetDamageForce( damageInfo )
    ent.SetVelocity( ent.GetVelocity() + forceVec )
    thread RocketJumperVisualEffect( ent ) // trails and sound!
    DamageInfo_SetDamageForce( damageInfo, < 0,0,0 > ) // only receive velocity from jumper

    if( mods.contains( "grenadier_low_damage" ) ) // combo
        DamageInfo_SetDamage( damageInfo, 0 )

    /*
    int damageSourceID = DamageInfo_GetDamageSourceIdentifier( damageInfo )
    float scale = 1.0
    switch( damageSourceID )
    {
        case eDamageSourceId.mp_weapon_softball:
            scale = SCALEPUSH_SOFTBALL
        case eDamageSourceId.mp_weapon_epg:
            scale = SCALEPUSH_EPG
        case eDamageSourceId.mp_weapon_pulse_lmg:
            scale = SCALEPUSH_COLDWAR
        case eDamageSourceId.mp_weapon_smr:
            scale = SCALEPUSH_SMR
    }

	if( mods.contains( "rocket_jumper" ) ) // bind something together?
	{
        DamageInfo_SetDamage( damageInfo, 0 )
		if ( ent.IsPlayer() )
			RocketJumper_EffectsPlayer( ent, attacker, damageInfo, scale )
	}
    */
}

void function RocketJumperVisualEffect( entity player )
{
    player.EndSignal( "OnDeath" )
    player.EndSignal( "OnDestroy" )
    player.Signal( "RocketJumperVisual" )
    player.EndSignal( "RocketJumperVisual" )

    array<entity> fxArray // saving fxs

    OnThreadEnd(
        function():( player, fxArray )
        {
            if( IsValid( player ) )
            {
                //StopSoundOnEntity( player, "jumpjet_freefall_body_1p" )
            }
            foreach( entity fx in fxArray )
            {
                if( IsValid( fx ) )
                    EffectStop( fx )
            }
        }
    )

    if( player.LookupAttachment( "foot_L_sole" ) > 0 ) // has attachment?
    {
        // enemy left foot fx
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_enemy_jump_jet_DBL", "foot_L_sole", false ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_enemy_jump_jet_ON_trails", "foot_L_sole", false ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_enemy_jump_jet_ON", "foot_L_sole", false ) )
        // friendly left foot fx
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_team_jump_jet_DBL", "foot_L_sole", true ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_team_jump_jet_ON_trails", "foot_L_sole", true ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_team_jump_jet_ON", "foot_L_sole", true ) )
    }
    else if( player.LookupAttachment( "vent_left" ) > 0 ) // no foot attachment, try play on vent
    {
        // enemy left vent fx
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_enemy_jump_jet_DBL", "vent_left", false ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_enemy_jump_jet_ON_trails", "vent_left", false ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_enemy_jump_jet_ON", "vent_left", false ) )
        // friendly left vent fx
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_team_jump_jet_DBL", "vent_left", true ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_team_jump_jet_ON_trails", "vent_left", true ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_team_jump_jet_ON", "vent_left", true ) )
    }

    if( player.LookupAttachment( "foot_R_sole" ) > 0 ) // has attachment?
    {
        // enemy right foot fx
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_enemy_jump_jet_DBL", "foot_R_sole", false ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_enemy_jump_jet_ON_trails", "foot_R_sole", false ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_enemy_jump_jet_ON", "foot_R_sole", false ) )
        // friendly right foot fx
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_team_jump_jet_DBL", "foot_R_sole", true ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_team_jump_jet_ON_trails", "foot_R_sole", true ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_team_jump_jet_ON", "foot_R_sole", true ) )
    }
    else if( player.LookupAttachment( "vent_right" ) > 0 ) // no foot attachment, try play on vent
    {
        // enemy right vent fx
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_enemy_jump_jet_DBL", "vent_right", false ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_enemy_jump_jet_ON_trails", "vent_right", false ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_enemy_jump_jet_ON", "vent_right", false ) )
        // friendly right vent fx
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_team_jump_jet_DBL", "vent_right", true ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_team_jump_jet_ON_trails", "vent_right", true ) )
        fxArray.append( CreateRocketJumperTrailForPlayer( player, $"P_team_jump_jet_ON", "vent_right", true ) )
    }

    wait 0.2 // magic number, mostly player can't instant leave ground after push, do a wait

    bool soundPlayed = false
    while( true )
    {
        /* // annoying sound, no need to play
        print( player.GetVelocity().z )
        if( player.GetVelocity().z <= -100 && !soundPlayed ) // begin fast freefall
        {
            EmitSoundOnEntityOnlyToPlayer( player, player, "jumpjet_freefall_body_1p" ) // play a sound
            soundPlayed = true
        }
        */
        if( player.IsOnGround() ) // touched ground
            break

        WaitFrame()
    }
}

entity function CreateRocketJumperTrailForPlayer( entity player, asset particle, string attachment, bool isFriendly )
{
	int particleID = GetParticleSystemIndex( particle )
	int attachID = player.LookupAttachment( attachment )
	if( attachID <= 0 ) // no attachment valid, don't play fx for this model
		return null
	entity fx = StartParticleEffectOnEntity_ReturnEntity( player, particleID, FX_PATTACH_POINT_FOLLOW, attachID )
	fx.SetOwner( player ) // never play this on firendlies
    SetTeam( fx, player.GetTeam() )
	if( isFriendly ) // player can see friendly fx( blue flames and trails )
		fx.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY
	else
		fx.kv.VisibilityFlags = ENTITY_VISIBLE_TO_ENEMY

	return fx
}

// unused!!!!
void function RocketJumper_EffectsPlayer( entity victim, entity attacker, var damageInfo, float scalePush )
{
	if ( victim.IsPhaseShifted() )
		return

    /** Dropoff */
    entity inflictor = DamageInfo_GetInflictor( damageInfo )
    vector origin = inflictor.GetOrigin()
    float radius = PUSH_RADIUS
    vector force = ( victim.GetOrigin() + /** Approx. player waist height */ <0,0,40> - origin )
    float len = vmag(force) // Vector size
    vector normForce = force * (1/len) // Normalized vector
    float pushF = -1/radius * pow(len, 2) + radius // Quadratic force dropoff from origin
    vector effectiveForce = normForce * pushF // Resize normalized vector with added force
    if(victim.IsTitan())
        effectiveForce = effectiveForce * 0.3

    victim.SetVelocity( victim.GetVelocity() + effectiveForce * scalePush )
}

float function vmag( vector v ){
    return sqrt(v.x*v.x + v.y*v.y + v.z*v.z)
}
#endif