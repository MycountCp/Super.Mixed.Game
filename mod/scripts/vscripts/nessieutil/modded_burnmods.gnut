// note that this file is currently only for amped weapons burncard, can't affect CodeCallback_CheckPassThroughAddsMods()
global function Modded_Weapon_BurnMods_Init

// main callbacks
global function ModdedBurnMods_AddDisabledMod // weapon with these mods won't get a burnmod. mostly for CodeCallback_CheckPassThroughAddsMods()
global function ModdedBurnMods_AddReplacementBurnMod // use another mod to replace a weapon's burnmod

// utilities
global function ModdedBurnMods_IsModdedWeapon
global function ModdedBurnMods_WeaponHasReplacementBurnMod
global function ModdedBurnMods_WeaponHasDisabledBurnMod

global function ModdedBurnMods_GetBurnModFromWeapon // pass a weapon entity and get it's burnmod with modded support

struct
{
	array<string> moddedMods
	array<string> burnModDisabledMods
	table<string, string> replacementBurnMods
} file

void function Modded_Weapon_BurnMods_Init()
{

}

void function ModdedBurnMods_AddDisabledMod( string mod )
{
	if ( !file.burnModDisabledMods.contains( mod ) )
		file.burnModDisabledMods.append( mod )

	AddToTotalModdedMods( mod )
}

void function ModdedBurnMods_AddReplacementBurnMod( string mod, string replacement )
{
	if ( !( mod in file.replacementBurnMods ) )
		file.replacementBurnMods[ mod ] <- ""
	file.replacementBurnMods[ mod ] = replacement

	AddToTotalModdedMods( mod )
}

void function AddToTotalModdedMods( string mod )
{
	if ( !file.moddedMods.contains( mod ) )
		file.moddedMods.append( mod )
}

bool function ModdedBurnMods_IsModdedWeapon( entity weapon )
{
	foreach ( string mod in file.moddedMods )
	{
		if ( weapon.HasMod( mod ) )
			return true
	}

	return false
}

string function ModdedBurnMods_GetBurnModFromWeapon( entity weapon )
{
	// generic checks
    if( !IsValid( weapon ) )
        return ""
	if ( !ModdedBurnMods_IsModdedWeapon( weapon ) )
		return ""
	if ( ModdedBurnMods_WeaponHasDisabledBurnMod( weapon ) )
		return ""

	array<string> mods = weapon.GetMods()
	foreach ( string mod in mods )
	{
		if ( mod in file.replacementBurnMods )
			return file.replacementBurnMods[ mod ]
	}

	// no any modded burnmod found
	return ""
}

bool function ModdedBurnMods_WeaponHasReplacementBurnMod( entity weapon )
{
	if ( ModdedBurnMods_WeaponHasDisabledBurnMod( weapon ) ) // shouldn't apply any burnmod for disabled weapon
		return false

    foreach ( string mod, string replace in file.replacementBurnMods )
	{
		if ( weapon.HasMod( mod ) )
			return true
	}

	return false
}

bool function ModdedBurnMods_WeaponHasDisabledBurnMod( entity weapon )
{
	foreach ( string mod in file.burnModDisabledMods )
	{
		if ( weapon.HasMod( mod ) )
			return true
	}

	return false
}