untyped // .SetPlayerSettingsWithMods() need it

global function AltPilot_Enable_Init // for loadedinits
global function AltPilot_Init

global function AltPilot_ReplacePilotModel
global function AltPilot_GivePlayerRandomModel
global function FUCKOFFCLOAK
global function FUCKOFFAWALL

global function AltPilot_SetShouldReplaceModel
global function SetAltPilotChance
global function AltPilot_SetPlayerModelAllRandom
global function SetShouldFUCKOFFCLOAK
global function SetShouldFUCKOFFAWALL
global function SetShouldAlsoFuckOffPOV

const array<asset> ALTPILOT_RANDOM_MODELS = 
[
	$"models/humans/pilots/pilot_medium_stalker_m.mdl", 
	$"models/humans/pilots/pilot_medium_stalker_f.mdl", 
	$"models/humans/pilots/pilot_medium_geist_m.mdl", 
	$"models/humans/pilots/pilot_medium_geist_f.mdl", 
	$"models/humans/pilots/pilot_medium_reaper_m.mdl", 
	$"models/humans/pilots/pilot_medium_reaper_f.mdl", 
	$"models/humans/pilots/pilot_light_ged_m.mdl", 
	$"models/humans/pilots/pilot_light_ged_f.mdl", 
	$"models/humans/pilots/pilot_light_jester_m.mdl", 
	$"models/humans/pilots/pilot_light_jester_f.mdl", 
	$"models/humans/pilots/pilot_heavy_drex_m.mdl", 
	$"models/humans/pilots/pilot_heavy_drex_f.mdl", 
	$"models/humans/pilots/pilot_heavy_roog_m.mdl", 
	$"models/humans/pilots/pilot_heavy_roog_f.mdl", 
	$"models/humans/grunts/mlt_grunt_lmg.mdl", 
	$"models/humans/grunts/imc_grunt_lmg.mdl", 
	$"models/humans/grunts/imc_grunt_shield_captain.mdl", 
	$"models/robots/spectre/imc_spectre.mdl"
	$"models/Humans/heroes/imc_hero_ash.mdl", 
	$"models/Humans/heroes/imc_hero_blisk.mdl", 
	$"models/humans/heroes/mlt_hero_jack.mdl", 
	$"models/humans/heroes/mlt_hero_sarah.mdl", 
	$"models/Humans/heroes/imc_hero_blisk.mdl", 
	$"models/humans/pilots/sp_medium_geist_f.mdl", 
	$"models/humans/pilots/sp_medium_reaper_m.mdl", 
	$"models/humans/pilots/sp_medium_stalker_m.mdl"
]

// now using playerSettings to check, saving model names here

// Holopilot Male
//$"models/humans/pilots/pilot_medium_stalker_m.mdl"
// Holopilot Female
//$"models/humans/pilots/pilot_medium_stalker_f.mdl"

// Shifter Male
//$"models/humans/pilots/pilot_light_ged_m.mdl"
// Shifter Female
//$"models/humans/pilots/pilot_light_ged_f.mdl"

// Stim Male
//$"models/humans/pilots/pilot_light_jester_m.mdl"
// Stim Female
//$"models/humans/pilots/pilot_light_jester_f.mdl"

// PulseBlade Male
//$"models/humans/pilots/pilot_medium_reaper_m.mdl"
// PulseBlade Female
//$"models/humans/pilots/pilot_medium_reaper_f.mdl"

// Grapple Male
//$"models/humans/pilots/pilot_medium_geist_m.mdl"
// Grapple Female
//$"models/humans/pilots/pilot_medium_geist_f.mdl"

// Cloak Male
//$"models/humans/pilots/pilot_heavy_drex_m.mdl"
// Cloak Female
//$"models/humans/pilots/pilot_heavy_drex_f.mdl"

// A-Wall Male
//$"models/humans/pilots/pilot_heavy_roog_m.mdl"
// A-Wall Female
//$"models/humans/pilots/pilot_heavy_roog_f.mdl

struct
{
	// no need to change table contents
	table<entity, bool> playerPickedModelChangeChance
	table<entity, bool> playerThisLifeChangeModel // for we can have more stable model changes
	table<entity, bool> playerHasChangedModel

	bool modelReplaceEnabled = false
	float modelReplaceChance = 0.25 // 25% by default
	bool allRandomModel = false
	
	// stupid things
	bool modelFuckOffCloak = false
	bool modelFuckOffAWall = false
	bool fuckOffPOV = true
} file

void function AltPilot_Enable_Init()
{
	file.modelReplaceEnabled = true
}

void function AltPilot_Init() 
{
	PrecacheModel( $"models/humans/grunts/imc_grunt_shield_captain.mdl" )
	
	// stop any thread processing
	RegisterSignal( "AltPilotModelReplace" )

	//AddCallback_OnPlayerRespawned( RespawnModelSet ) // really doesn't seem needed, change loadout can handle it, this might mess up some models
	AddCallback_OnClientConnected( InitializeAltPilot )
	AddDeathCallback( "player", CleanUpModelChance )
	AddCallback_OnPlayerGetsNewPilotLoadout( ChangeloadoutModelSet )
	AddCallback_OnTitanBecomesPilot( DisembarkingModelSet )
}

void function AltPilot_SetShouldReplaceModel( bool should )
{
	file.modelReplaceEnabled = should
}

void function SetAltPilotChance( float percentage )
{
	file.modelReplaceChance = percentage
}

void function AltPilot_SetPlayerModelAllRandom( bool random )
{
	file.allRandomModel = random
	SetPlayerBodyTypeDependOnSurfaceProp( random ) // bind together to fix death effect
}

void function SetShouldFUCKOFFCLOAK( bool should )
{
	file.modelFuckOffCloak = should
}

void function SetShouldFUCKOFFAWALL( bool should )
{
	file.modelFuckOffAWall = should
}

void function SetShouldAlsoFuckOffPOV( bool should )
{
	file.fuckOffPOV = should
}

void function InitializeAltPilot( entity player )
{
	file.playerPickedModelChangeChance[ player ] <- false
	file.playerThisLifeChangeModel[ player ] <- false
	file.playerHasChangedModel[ player ] <- false
}

/* // really doesn't seem needed, change loadout can handle it, this might mess up some models
void function RespawnModelSet( entity player )
{
	// fuckoff goes first
	if( file.modelFuckOffCloak )
		FUCKOFFCLOAK( player )
	if( file.modelFuckOffAWall )
		FUCKOFFAWALL( player )
	
	// try to do recovering
	RecoverFromModelChange( player )
	
	if( file.allRandomModel )
		AltPilot_GivePlayerRandomModel( player )
	else if( file.modelReplaceEnabled )
	{
		if ( RandomInt( file.modelReplaceChance ) == 0 )
			AltPilot_ReplacePilotModel( player )
	}
}
*/

void function CleanUpModelChance( entity victim, var damageInfo )
{
	if ( victim in file.playerPickedModelChangeChance )
		file.playerPickedModelChangeChance[ victim ] = false
}

// changeLoadout to same tactical doesn't reset model
// maybe reset it could be funnier, but always trigger ghost skin
void function ChangeloadoutModelSet( entity player , PilotLoadoutDef p )
{
	// pick modelchange chance. this is called earlier than "OnPlayerRespawned()", we cannot get from it
	//print( "file.playerPickedModelChangeChance[ player ]: " + string( file.playerPickedModelChangeChance[ player ] ) )
	if ( !file.playerPickedModelChangeChance[ player ] )
	{
		file.playerThisLifeChangeModel[ player ] = false
		if ( file.modelReplaceEnabled )
			file.playerThisLifeChangeModel[ player ] = RandomInt( int( 1.0 / file.modelReplaceChance ) ) == 0
		file.playerPickedModelChangeChance[ player ] = true
	}

	// fuckoff goes first
	if( file.modelFuckOffCloak )
		FUCKOFFCLOAK( player )
	if( file.modelFuckOffAWall )
		FUCKOFFAWALL( player )

	//print( "file.playerHasChangedModel[ player ]: " + string( file.playerHasChangedModel[ player ] ) )
	//print( "file.playerThisLifeChangeModel[ player ]: " + string( file.playerThisLifeChangeModel[ player ] ) )

	// try to do recovering
	if ( file.playerHasChangedModel[ player ] )
	{
		RecoverFromModelChange( player )
		file.playerHasChangedModel[ player ] = false
	}

	if( file.allRandomModel )
		AltPilot_GivePlayerRandomModel( player )
	else if( file.modelReplaceEnabled )
	{
		if ( file.playerThisLifeChangeModel[ player ] )
			AltPilot_ReplacePilotModel( player )
	}
}

void function DisembarkingModelSet( entity player, entity titan )
{
	thread DisembarkingModelSet_Threaded( player, titan )
}

void function DisembarkingModelSet_Threaded( entity player, entity titan )
{
	player.EndSignal( "OnDestroy" )
	WaitSignal( player, "OnAnimationDone", "OnAnimationInterrupted" ) // wait for player finish disembarking anim

	// fuckoff goes first
	if( file.modelFuckOffCloak )
		FUCKOFFCLOAK( player )
	if( file.modelFuckOffAWall )
		FUCKOFFAWALL( player )

	if( file.allRandomModel )
		AltPilot_GivePlayerRandomModel( player )
	else if( file.modelReplaceEnabled )
	{
		if ( file.playerThisLifeChangeModel[ player ] )
			AltPilot_ReplacePilotModel( player )
	}
}

//Apply Model
void function AltPilot_ReplacePilotModel( entity player )
{
	if ( !IsValid( player ) ) //Anti Crash
		return

	player.Signal( "AltPilotModelReplace" )

	string playerSettings = player.GetPlayerSettings()
	asset replacementModel = $""

	switch ( playerSettings )
	{
		case "pilot_stalker_male": // Holopilot Male
			replacementModel = $"models/humans/grunts/mlt_grunt_lmg.mdl"
			break
		case "pilot_stalker_female": // Holopilot Female
			replacementModel = $"models/humans/grunts/imc_grunt_lmg.mdl"
			break
		case "pilot_light_male": // Shifter Male
			replacementModel = $"models/robots/spectre/imc_spectre.mdl"
			break
		case "pilot_light_female": // Shifter Female
			replacementModel = $"models/Humans/heroes/imc_hero_ash.mdl"
			break
		case "pilot_nomad_male": // Stim Male, sometimes shows holo skin, tried to fix it with GhostSkinPrevention()
			replacementModel = $"models/humans/heroes/mlt_hero_jack.mdl"
			break
		case "pilot_nomad_female": // Stim Female, sometimes shows holo skin, tried to fix it with GhostSkinPrevention()
			replacementModel = $"models/humans/heroes/mlt_hero_sarah.mdl"
			break
		case "pilot_medium_male": // PulseBlade Male
			replacementModel = $"models/Humans/heroes/imc_hero_blisk.mdl"
			break
		case "pilot_medium_female": // PulseBlade Female
			replacementModel = $"models/humans/pilots/sp_medium_geist_f.mdl"
			break
		case "pilot_grapple_male": // Grapple Male
			replacementModel = $"models/humans/pilots/sp_medium_reaper_m.mdl"
			break
		case "pilot_grapple_female": // Grapple Female
			replacementModel = $"models/humans/pilots/sp_medium_stalker_m.mdl"
			break
		case "pilot_heavy_male": // A-Wall Male
		case "pilot_heavy_female": // A-Wall Female
			replacementModel = $"models/humans/grunts/imc_grunt_shield_captain.mdl"
			break
	}

	if ( replacementModel != $"" )
	{
		player.SetValueForModelKey( replacementModel )
		player.SetModel( replacementModel )
		file.playerHasChangedModel[ player ] = true // mark as player changed model
		thread GhostSkinPrevention( player ) // always loop this
	}
}

// HACK for sometimes going from spectre will hide model
void function RecoverFromModelChange( entity player )
{
	player.kv.VisibilityFlags = ENTITY_VISIBLE_TO_EVERYONE 
	player.Show()

	int skin = player.GetSkin()
	int camo = player.GetCamo()
	// reset model
	player.SetValueForModelKey( $"models/humans/pilots/pilot_medium_reaper_f.mdl" )
	player.SetModel( $"models/humans/pilots/pilot_medium_reaper_f.mdl" )
	
	// recover player model
	asset model = GetPlayerSettingsAssetForClassName( player.GetPlayerSettings(), "bodymodel" )
	player.SetValueForModelKey( model )
	player.SetModel( model )
	player.SetSkin( skin )
	player.SetCamo( camo )
}

void function GhostSkinPrevention( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "AltPilotModelReplace" )
	
	while( true )
	{
		if( player.GetModelName() == $"models/humans/heroes/mlt_hero_jack.mdl" || 
			player.GetModelName() == $"models/humans/heroes/mlt_hero_sarah.mdl" )
		{
			// prevent jack and sarah being like ghost material
			player.SetSkin(0)
			player.SetCamo(0)
		}
		if( player.IsTitan() )
			return // player has embarked
		WaitFrame()
	}
}

void function AltPilot_GivePlayerRandomModel( entity player )
{
	asset model = ALTPILOT_RANDOM_MODELS[RandomInt(ALTPILOT_RANDOM_MODELS.len())]
	player.SetValueForModelKey( model )
	player.SetModel( model )
	thread GhostSkinPrevention( player ) // always loop this
}

void function FUCKOFFCLOAK( entity player )
{
	string playerSettings = player.GetPlayerSettings()
	
	//Cloak
	if( playerSettings == "pilot_geist_male" )
	{
		int skin = player.GetSkin()
		int camo = player.GetCamo()

		array<string> settingMods = player.GetPlayerSettingsMods()
		if( file.fuckOffPOV )
		{
			//First Person Model
			player.SetPlayerSettingsWithMods( "pilot_grapple_male", settingMods )
		}
		else
		{
			//Model
			player.SetModel( $"models/humans/pilots/pilot_medium_geist_m.mdl" )
			player.SetValueForModelKey( $"models/humans/pilots/pilot_medium_geist_m.mdl" )
		}
		player.SetSkin( skin )
		player.SetCamo( camo )
	}
	if( playerSettings == "pilot_geist_female" )
	{
		int skin = player.GetSkin()
		int camo = player.GetCamo()
		
		array<string> settingMods = player.GetPlayerSettingsMods()
		if( file.fuckOffPOV )
		{
			//First Person Model
			player.SetPlayerSettingsWithMods( "pilot_grapple_female", settingMods )
		}
		else
		{
			//Model
			player.SetModel( $"models/humans/pilots/pilot_medium_geist_f.mdl" )
			player.SetValueForModelKey( $"models/humans/pilots/pilot_medium_geist_f.mdl" )
		}
		player.SetSkin( skin )
		player.SetCamo( camo )
	}

}

void function FUCKOFFAWALL( entity player )
{
	string playerSettings = player.GetPlayerSettings()

	//A-Wall
	if( playerSettings == "pilot_heavy_male" )
	{
		int skin = player.GetSkin()
		int camo = player.GetCamo()
	
		array<string> settingMods = player.GetPlayerSettingsMods()
		if( file.fuckOffPOV )
		{
			//First Person Model
			player.SetPlayerSettingsWithMods( "pilot_grapple_female", settingMods )
		}
		else
		{
			//Model
			player.SetModel( $"models/humans/pilots/pilot_medium_geist_f.mdl" )
			player.SetValueForModelKey( $"models/humans/pilots/pilot_medium_geist_f.mdl" )
		}
		player.SetSkin( skin )
		player.SetCamo( camo )
	}
	if( playerSettings == "pilot_heavy_female" )
	{
		int skin = player.GetSkin()
		int camo = player.GetCamo()
	
		array<string> settingMods = player.GetPlayerSettingsMods()
		if( file.fuckOffPOV )
		{
			//First Person Model
			player.SetPlayerSettingsWithMods( "pilot_grapple_female", settingMods )
		}
		else
		{
			//Model
			player.SetModel( $"models/humans/pilots/pilot_medium_geist_f.mdl" )
			player.SetValueForModelKey( $"models/humans/pilots/pilot_medium_geist_f.mdl" )
		}
		player.SetSkin( skin )
		player.SetCamo( camo )
	}
}