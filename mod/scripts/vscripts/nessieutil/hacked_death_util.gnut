// file to prevent player enter death flash and blur, also modified many other vanilla functions! take care of that
untyped
global function Hacked_Death_Utility_Init

global function HackedDeath_PlayerStart
global function HackedDeath_PlayerRecoverFrom
global function HackedDeath_ShouldHandleDamage

global function HackedDeath_SetEnabled
global function HackedDeath_IsEnabled
global function HackedDeath_IsPlayerHackedDeathed

// maybe useful settings
global function HackedDeath_SetFakeBodySilence
global function HackedDeath_SetDeathEffectEnable

//global function CreatePlayerEntity

// death effect
const asset FLESH_PINKMIST_FX = $"death_pinkmist_LG_nochunk" // was death_pinkmist_nochunk
const asset MECHNAICAL_PINKMIST_FX = $"xo_damage_exp_1" // was xo_damage_exp_2, current one has chunks

// used in _base_gametype.gnut, for showing player correct damage number
global bool hackedDeathKillshot = false
global float hackedDeathActualDamage = 0.0

struct
{
    bool hackedDeathEnabled = false

	// settings
	bool fakeBodySilence = true
	bool deathEffectEnable = true
} file

void function Hacked_Death_Utility_Init()
{
    // funny HACKs!
	RegisterSignal( "StartHackedDeath" )
	RegisterSignal( "RecoverFromHackedDeath" )
	PrecacheParticleSystem( FLESH_PINKMIST_FX )
	PrecacheParticleSystem( MECHNAICAL_PINKMIST_FX )
	
	AddPostDamageCallback( "player", HackedDeath_OnPlayerPostDamage ) // this can get player's real taken damage
	AddDeathCallback( "player", HackedDeath_PlayerRealDeath )
	AddCallback_OnClientConnected( InitHackedDeathForPlayer )

	AddCallback_GameStateEnter( eGameState.Playing, HackedDeathGameSettings ) // settings done after game starts, to prevent being overwrite

	// handling grapple
	AddCallback_OnPlayerGrappled( HackedDeathOnPlayerGrappled ) // modified callback in _codecallbacks.gnut
}

// utility
bool function HackedDeath_ShouldHandleDamage( entity ent, var damageInfo )
{
	if ( ent.IsMarkedForDeletion() )
		return false
	if ( !ent.IsPlayer() )
		return false
	if ( !file.hackedDeathEnabled || !RespawnsEnabled() ) // don't do hacked death for elimination modes
		return false
	if ( IsInstantDeath( damageInfo ) || DamageInfo_GetForceKill( damageInfo ) || ent.IsTitan() )	
		return false // these shouldn't be handled by hacked death
	return true
}

void function InitHackedDeathForPlayer( entity player )
{	
	player.s.hackedDeath <- false
	thread DisablePlayerUselessSoundsLifeLong( player )
}

// Grapple settings
void function HackedDeathOnPlayerGrappled( entity player, entity victim )
{
	// hacked death: track attacker cancelling the grapple, players are able to grapple a spectator player if they're not actually dead
	if ( file.hackedDeathEnabled )
		thread TrackPlayerGrappleDetach( player, victim )
}

void function TrackPlayerGrappleDetach( entity player, entity target )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	target.EndSignal( "OnDeath" ) // wait for target hacked death
	target.EndSignal( "OnDestroy" )

	table results = {}
	results.cancelled <- false

	OnThreadEnd
	(
		function(): ( player, target, results )
		{
			if ( IsValid( player ) )
			{
				if ( IsValid( target ) ) // target still valid, meaning they're just hacked deathed
				{
					if ( !results.cancelled ) // not manually cancelled
					{
						player.Grapple( < 0, 0, 0 > ) // fire another grapple while grappling will cancel current one
						//print( "Player being forced cancelling grapple!" )
					}
				}

				// clean up
				RemoveButtonPressedPlayerInputCallback( player, IN_DUCK, PlayerPressedGrappleDetachButton )
				RemoveButtonPressedPlayerInputCallback( player, IN_DUCKTOGGLE, PlayerPressedGrappleDetachButton )
			}
		}
	)

	// check cancelling through crouching
	AddButtonPressedPlayerInputCallback( player, IN_DUCK, PlayerPressedGrappleDetachButton )
	AddButtonPressedPlayerInputCallback( player, IN_DUCKTOGGLE, PlayerPressedGrappleDetachButton )

	// solved: // "OnGrappled" is a modified signal in mp_ability_grapple.gnut, should really be handed by AddCallback_MpAbilityGrapplePrimaryAttack() )
	WaitSignal( player, "GrappleCancelled", "OnGrappled" )
	results.cancelled = true // if triggered these signals we consider it as grapple cancelled
	//print( "Player cancelled grapple!" )
}

void function PlayerPressedGrappleDetachButton( entity player )
{
	player.Signal( "GrappleCancelled" )
}

void function HackedDeathGameSettings()
{
	SetShouldUseRoundWinningKillReplay( false ) // never do replay
}

void function DisablePlayerUselessSoundsLifeLong( entity player )
{
	player.EndSignal( "OnDestroy" )
	
	float lastHealthFrac = 1.0
	bool woundedSoundStopped = false
	while( true )
	{
		if( file.hackedDeathEnabled )
		{
			if ( IsAlive( player ) )
			{
				if ( !woundedSoundStopped && lastHealthFrac > GetHealthFrac( player ) && GetHealthFrac( player ) <= 0.5 )
				{
					StopPlayerWoundedSound( player ) // we stop wounded sound for player
					woundedSoundStopped = true
				}
				else if ( GetHealthFrac( player ) > 0.5 )
					woundedSoundStopped = false
					
				lastHealthFrac = GetHealthFrac( player )
			}
			//StopPlayerWoundedSound( player )
			//print( "IsAlive( player ): " + string( IsAlive( player ) ) )
			//if ( !IsAlive( player ) ) // prevent player's jumpjet sound floating around
				//StopPlayerJumpJetSound( player )
		}
		WaitFrame()
	}
}

void function StopPlayerWoundedSound( entity player )
{
	// player sound fadeout is done in client base I guess, not handling like stim sounds
	//StopSoundOnEntity( player, "pilot_critical_breath_start_1p" ) // should save this for notifying player's low health
	StopSoundOnEntity( player, "pilot_critical_breath_loop_1p" )
	StopSoundOnEntity( player, "pilot_critical_drone_loop_1p" )
	StopSoundOnEntity( player, "pilot_wounded_loop_1p" )
	StopSoundOnEntity( player, "player_death_begin" ) // this will make dying sounds better
}

void function HackedDeath_OnPlayerPostDamage( entity player, var damageInfo )
{
	if ( !HackedDeath_ShouldHandleDamage( player, damageInfo ) )
		return
	if ( player.s.hackedDeath ) // player already hacked deathed!
		return
	if ( player.GetHealth() + player.GetShieldHealth() - DamageInfo_GetDamage( damageInfo ) <= 0 )
	{
		// triggered hacked death
		hackedDeathKillshot = true // mark as killshot
		hackedDeathActualDamage = DamageInfo_GetDamage( damageInfo ) // save the damage
		DamageInfo_SetDamage( damageInfo, player.GetHealth() - 1 ) // don't kill the player
		if( IsPlayerDeathsHidden() ) // add a extra death sound here
			EmitSoundOnEntityOnlyToPlayer( player, player, "flesh_bulletimpact_killshot_1p_vs_3p" )
		HackedDeath_PlayerStart( player, damageInfo )
	}
}

void function HackedDeath_PlayerStart( entity player, var damageInfo )
{
	player.s.hackedDeath = true // for IsAlive() checks
	player.Signal( "StartHackedDeath" ) // signal this
	player.Signal( "OnDeath" ) // this will trigger most things that EndSignal( "OnDeath" )
	player.kv.VisibilityFlags = 0
	
	if ( player.Anim_IsActive() ) // try not to stop animation if don't have a anim active
		player.Anim_Stop()
	player.ClearParent()
	player.kv.CollisionGroup = 0 // stop collision
	player.NotSolid()
	
	//HolsterAndDisableWeapons( player ) // player is able to pick up weapons, don't let them able to use it
	thread ForceHolsterForHackedDeath( player ) // defensive fix for sometimes player DeployWeapon() from other scripts...
	
	DamageInfo_AddCustomDamageType( damageInfo, DF_KILLSHOT )
	
	player.SetInvulnerable()
	player.SetHealth( player.GetMaxHealth() ) // so player's visual will be clean, and they won't receive a sound when they recover to max health
	player.Signal( "StopHealthRegenThink" ) // modified signal in _health_regen.gnut
	
	//TakeAllOffhandInstantNow( player ) // grapple now handling in callbacks // can this cancel grapple things?
	StopPlayerGrapple( player ) // stop player's grapple rope!
	// save offhands so player can have cooked grenades out, usage has been freezed
	//TakeOffhandWeaponsNow( player ) // just leave weapon bars full, it looks better! should put lower for "stealing" mutator to work
	
	player.FreezeControlsOnServer() // freeze them, avoid picking up weapons
	
	CodeCallback_OnEntityKilled( player, damageInfo ) // display obit
	CreateHackedDeathFakeCorpse( player, damageInfo ) // create fake body before postDeathThread starts
	CodeCallback_OnPlayerKilled( player, damageInfo )
	
	// fuck you respawn why leaving a annying death sound
	//if( IsPlayerDeathsHidden() )
	//{
		//AddCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD ) // better show attacker's callsign?
		//EmitSoundOnEntityOnlyToPlayer( player, player, "flesh_bulletimpact_killshot_1p_vs_3p" ) // extra death sound
	//}

	//player.SetPlayerSettings( "spectator" ) // well this can't show a death icon on scoreboard, and sometimes crashes client
}

// vanilla won't stop player's jump jet sound upon death... don't do so many StopSound(), otherwise client will lose sound effect
void function StopPlayerJumpJetSound( entity player )
{
	// jumpjets
	StopSoundOnEntity( player, "jumpjet_freefall_body_1p" ) 
	StopSoundOnEntity( player, "jumpjet_freefall_body_3p" ) 
	StopSoundOnEntity( player, "jumpjet_freefall_body_3p_enemy" ) 
	StopSoundOnEntity( player, "jumpjet_freefall_body_3p_enemy_OLD" ) 
	StopSoundOnEntity( player, "jumpjet_freefall_body_3p_OLD" ) 
	StopSoundOnEntity( player, "jumpjet_freefall_end_1p" ) 
	StopSoundOnEntity( player, "jumpjet_freefall_end_3p" ) 
	StopSoundOnEntity( player, "jumpjet_freefall_end_3p_enemy" ) 
	StopSoundOnEntity( player, "jumpjet_freefall_start_1p" ) 
	StopSoundOnEntity( player, "jumpjet_freefall_start_3p" ) 
	StopSoundOnEntity( player, "jumpjet_freefall_start_3p_enemy" ) 
	StopSoundOnEntity( player, "jumpjet_jet_body_1p" ) 
	StopSoundOnEntity( player, "jumpjet_jet_body_3p" ) 
	StopSoundOnEntity( player, "jumpjet_jet_body_3p_enemy" ) 
	StopSoundOnEntity( player, "jumpjet_jet_body_3p_enemy_OLD" ) 
	StopSoundOnEntity( player, "jumpjet_jet_body_3p_OLD" ) 
	StopSoundOnEntity( player, "jumpjet_jet_end_1p" ) 
	StopSoundOnEntity( player, "jumpjet_jet_end_3p" ) 
	StopSoundOnEntity( player, "jumpjet_jet_end_3p_enemy" ) 
	StopSoundOnEntity( player, "jumpjet_jet_start_3p" ) 
	StopSoundOnEntity( player, "jumpjet_jet_start_3p_enemy" ) 
	StopSoundOnEntity( player, "jumpjet_jump_body_1p" ) 
	StopSoundOnEntity( player, "jumpjet_jump_body_3p" ) 
	StopSoundOnEntity( player, "jumpjet_jump_body_3p_enemy" ) 
	StopSoundOnEntity( player, "jumpjet_jump_body_3p_enemy_OLD" ) 
	StopSoundOnEntity( player, "jumpjet_jump_body_3p_OLD" ) 
	StopSoundOnEntity( player, "jumpjet_jump_end_1p" ) 
	StopSoundOnEntity( player, "jumpjet_jump_end_3p" )
	StopSoundOnEntity( player, "jumpjet_jump_end_3p_enemy" ) 
	StopSoundOnEntity( player, "jumpjet_jump_start_1p" ) 
	StopSoundOnEntity( player, "jumpjet_jump_start_3p" ) 
	StopSoundOnEntity( player, "jumpjet_jump_start_3p_enemy" ) 
	StopSoundOnEntity( player, "jumpjet_slide_start_1p" ) 
	StopSoundOnEntity( player, "jumpjet_slide_start_3p" ) 
	StopSoundOnEntity( player, "jumpjet_wallrun_body_1p" ) 
	StopSoundOnEntity( player, "jumpjet_wallrun_body_3p" ) 
	StopSoundOnEntity( player, "jumpjet_wallrun_body_3p_enemy" ) 
	StopSoundOnEntity( player, "jumpjet_wallrun_body_3p_enemy_OLD" ) 
	StopSoundOnEntity( player, "jumpjet_wallrun_body_3p_OLD" ) 
	StopSoundOnEntity( player, "jumpjet_wallrun_end_1p" ) 
	StopSoundOnEntity( player, "jumpjet_wallrun_end_3p" ) 
	StopSoundOnEntity( player, "jumpjet_wallrun_end_3p_enemy" ) 
	StopSoundOnEntity( player, "jumpjet_wallrun_start_1p" ) 
	StopSoundOnEntity( player, "jumpjet_wallrun_start_3p" ) 
	StopSoundOnEntity( player, "jumpjet_wallrun_start_3p_enemy" ) 

	// boosted jumpjets, unused in titanfall 2
}

void function ForceHolsterForHackedDeath( entity player )
{
	player.EndSignal( "OnDestroy" )
	
	WaitFrame() // assume player will never be in hacked death before this
	HolsterAndDisableWeapons( player )
	while( player.s.hackedDeath ) // keep try to holster weapon if player is being hackedDeath
	{
		player.HolsterWeapon()
		player.Server_TurnOffhandWeaponsDisabledOn()
		WaitFrame()
	}

	// player recovered?
	DeployAndEnableWeapons( player )
	player.DeployWeapon()
	player.Server_TurnOffhandWeaponsDisabledOff()
}

// should take all offhand_instant weapons, maybe it can cancel grapple things?
void function TakeAllOffhandInstantNow( entity player )
{
	foreach( entity offhand in player.GetOffhandWeapons() )
	{
		if( offhand.GetWeaponInfoFileKeyField( "fire_mode" ) == "offhand_instant" )
			player.TakeWeaponNow( offhand.GetWeaponClassName() )
	}
}

void function StopPlayerGrapple( entity player )
{
	if ( PlayerHasWeapon( player, "mp_ability_grapple" ) )
	{
		//player.Grapple( < 0, 0, 0 > ) // fire another grapple while grappling will cancel current one
		player.TakeWeaponNow( "mp_ability_grapple" ) // this one works better, for player's grapple won't show a icon upon hacked death
	}
}

void function TakeOffhandWeaponsNow( entity player )
{
	foreach( entity offhand in player.GetOffhandWeapons() )
	{
		player.TakeWeaponNow( offhand.GetWeaponClassName() )
	}
}

void function CreateHackedDeathFakeCorpse( entity player, var damageInfo )
{
	entity fakeBody
	if( player.IsMechanical() )
		fakeBody = CreateNPC( "npc_spectre", player.GetTeam(), player.GetOrigin(), player.GetAngles() )
	else // "npc_pilot_elite" cannot be gibbed
	{
		fakeBody = CreateNPC( "npc_soldier", player.GetTeam(), player.GetOrigin(), player.GetAngles() )
		fakeBody.s.hackedDeathBody <- true // this will make the grunt play flesh pilot's headshotFX in TryHeadshotDeathFX()
	}

	if ( file.fakeBodySilence )
		fakeBody.s.silentDeath <- true // don't play their death sound...

	fakeBody.SetValueForModelKey( player.GetModelName() )
	fakeBody.SetPoseParametersSameAs( player ) // make them use the same pose and sequence as player's
	fakeBody.SequenceTransitionFromEntity( player )

	DispatchSpawn( fakeBody )
	// setmodel should be done after they spawn
	fakeBody.SetModel( player.GetModelName() )
	// save player's head state and apply them to fakebody
    int stateIndex = -1
    int bodyGroupIndex = player.FindBodyGroup( "removableHead" )
	if ( bodyGroupIndex == -1 ) // don't have a removableHead
		bodyGroupIndex = player.FindBodyGroup( "head" )
	if ( bodyGroupIndex > -1 )
		stateIndex = player.GetBodyGroupState( bodyGroupIndex )
	if ( stateIndex >= 0 )
		fakeBody.SetBodygroup( bodyGroupIndex, stateIndex )

	// skin and camo won't work properly on non-player entities
	//fakeBody.SetSkin( player.GetSkin() )
	//fakeBody.SetCamo( player.GetCamo() )

	//fakeBody.Anim_Stop() // don't manually do a anim_stop, this will cause them to flash away from spawnpoint
	fakeBody.SetPoseParametersSameAs( player ) // make them use the same pose and sequence as player's
	fakeBody.SequenceTransitionFromEntity( player )
	fakeBody.kv.CollisionGroup = 0 // stop collision
	fakeBody.NotSolid() // don't let them blocking bullets
	fakeBody.SetHealth( 1 ) // so spectres will die from frag grenades

	TakeAllWeapons( fakeBody )
	// npcs won't drop certain kind of weapon, so we have to create a new weapon
	if( IsValid( player.GetActiveWeapon() ) && IsWeaponDropsEnabled() ) 
		DropCopyOfPlayerWeapon( player, damageInfo ) // this can be too complex, but it's the best way to solve it
	
	if ( file.deathEffectEnable )
		PlayHackedDeathKilledEffectOnPlayer( player, damageInfo )

	// need to check this, or dropping a invalid weapon will crash the game
	// game's weapon taken will leave a empty weapon bar, maybe no need to fix it
	//if( IsValid( player.GetActiveWeapon() ) && IsWeaponDropsEnabled() ) 
	//	player.DropWeapon( player.GetActiveWeapon() ) // this can handle it, but weapon will be throw too far

	fakeBody.Die(
		null, 
		null, 
		{ 	// damage table
			forceKill = true, // force killing them
			weapon = DamageInfo_GetWeapon( damageInfo ), 
			origin = DamageInfo_GetDamagePosition( damageInfo ), 
			force = DamageInfo_GetDamageForce( damageInfo ), 
			scriptType = DamageInfo_GetCustomDamageType( damageInfo ), 
			damageSourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo ) 
		} 
	)
	fakeBody.SetOrigin( player.GetOrigin() ) // sometimes it moves to weird position, maybe because navmeshes?
	fakeBody.SetAngles( player.GetAngles() )

	//print( "player on ground: " + string( player.IsOnGround() ) )
	if ( !player.IsOnGround() || player.IsWallRunning() ) // if player died on ground we don't update velocity
	{
		vector forceVec = DamageInfo_GetDamageForce( damageInfo ) + player.GetVelocity()
		float forceMag = Length( forceVec )
		forceVec = Normalize( forceVec )
		const float MAX_FORCE = 30000
		if ( forceMag > MAX_FORCE )
			forceMag = MAX_FORCE

		fakeBody.SetVelocity( forceVec * forceMag ) // so the body can fly as players does
		//print( forceVec * forceMag )
	}

	player.StopPhysics() // after fake corpse get player's velocity
	HideName( player )
	
	//player.kv.contents = (int(player.kv.contents) | CONTENTS_NOGRAPPLE) // grapple now handling in callbacks // make player unable to be grappled, hope this will cancel attacker's grapple
	// warns: contents can't be like ( int( player.kv.contents ) | CONTENTS_NOGRAPPLE ), remove useless spaces
}

void function PlayHackedDeathKilledEffectOnPlayer( entity player, var damageInfo )
{
	int attachmentIndex = player.LookupAttachment( "CHESTFOCUS" )
	if( attachmentIndex <= 0 ) // can't find valid attachment
		return

	// update origin and angles
	vector origin = player.GetAttachmentOrigin( attachmentIndex )
	vector angles = player.GetAttachmentAngles( attachmentIndex )

	bool isGibDeath = ( DamageInfo_GetCustomDamageType( damageInfo ) & DF_GIB ) > 0
	bool isBulletShot = ( DamageInfo_GetCustomDamageType( damageInfo ) & DF_BULLET ) > 0

	// killshot effect
	if ( isBulletShot && !isGibDeath ) // only play fx when killed by bullets
	{
		if( player.IsMechanical() )
		{
			// this should play independently
			int particleIndex = GetParticleSystemIndex( MECHNAICAL_PINKMIST_FX )
			
			//entity fx = PlayFX( MECHNAICAL_PINKMIST_FX, origin, angles )
			entity fx = StartParticleEffectOnEntity_ReturnEntity( player, particleIndex, FX_PATTACH_POINT_FOLLOW, attachmentIndex )
			EffectSetControlPointVector( fx, 1, < 0, 0, 0 > ) // prevent blood fx fly everywhere
			SetForceDrawWhileParented( fx, true )
			thread FastStopParticle( fx, 1.0 )
		}
		else // flesh
		{
			// this should play on player's FX_PATTACH_POINT_FOLLOW to make it more visible
			int particleIndex = GetParticleSystemIndex( FLESH_PINKMIST_FX )

			entity fx = StartParticleEffectOnEntity_ReturnEntity( player, particleIndex, FX_PATTACH_POINT_FOLLOW, attachmentIndex )
			EffectSetControlPointVector( fx, 1, < 0, 0, 0 > ) // prevent blood fx fly everywhere
			SetForceDrawWhileParented( fx, true )

			// play this fx on world will leave a less effective fx, which is... pretty weird
			//entity fx = StartParticleEffectInWorld_ReturnEntity( particleIndex, origin, < 0,0,0 > ) //PlayFX( MECHNAICAL_PINKMIST_FX, origin, angles )
			//PlayFX( FLESH_PINKMIST_FX, origin, angles )
		}
	}
}

void function FastStopParticle( entity fx, float delay )
{
    wait delay
    if( IsValid( fx ) )
        EffectStop( fx )
}

entity function DropCopyOfPlayerWeapon( entity player, var damageInfo )
{
	if( !IsWeaponDropsEnabled() ) // don't even try to drop it, though new drop-prevention function can handle it
		return
	array<entity> mainWeapons = player.GetMainWeapons()
	if( mainWeapons.len() < 1 ) // don't have a main weapon
		return
	entity activeWeapon = player.GetActiveWeapon()
	if ( !IsValid( activeWeapon ) )
		return
	if ( activeWeapon.IsWeaponOffhand() )
		player.ClearOffhand() // force player to pull out their last main weapon
	entity weapon = player.GetActiveWeapon()
	if( !mainWeapons.contains( weapon ) ) // still can't find this weapon...
		weapon = mainWeapons[0] // use slot1 mainWeapon
	string weaponType = expect string( weapon.GetWeaponInfoFileKeyField( "weaponClass" ) )
	if ( weaponType == "titan" ) // this is titan weapon type?
		return

	string weaponName = weapon.GetWeaponClassName()
	array<string> mods = weapon.GetMods()
	int skinIndex = weapon.GetSkin()
	int camoIndex = weapon.GetCamo()
	bool isUnlimitedAmmo = weapon.GetWeaponSettingBool( eWeaponVar.ammo_no_remove_from_stockpile )
	bool isInfiniteClip =  weapon.GetWeaponSettingInt( eWeaponVar.ammo_clip_size ) < 0 // clip size < 0 ( mostly -1 ) will cause weapon to have infinite clip
	int clipLeft = 0
	int ammoLeft = 0
	try // need to try-catch this!
	{
		clipLeft = weapon.GetWeaponPrimaryClipCount()
		ammoLeft = weapon.GetWeaponPrimaryAmmoCount()
	}
	catch(ex){}

	// since we've created a new weapon that may have burnmod( amped weapon ), should check these for proper behavior
	bool hasBurnMod = false
	string prefix = "burn_mod"
	foreach( string mod in mods )
	{
		if( mod.find( prefix ) == 0 ) // found burn mod!
			hasBurnMod = true
	}
	float ampDurationLeft = weapon.GetScriptTime0() - Time() // amped weapon timer!

	//vector velocity = player.GetVelocity()
	vector origin = player.GetOrigin()
	vector angles = player.GetAngles()
	int attachID = player.LookupAttachment( "PROPGUN" )
	if( attachID > 0 )
	{
		origin = player.GetAttachmentOrigin( attachID )
		angles = player.GetAttachmentAngles( attachID )
	}

	entity weaponToDrop = CreateWeaponEntityByNameWithPhysics( weaponName, origin, angles )
	weaponToDrop.SetMods( mods )
	weaponToDrop.SetSkin( skinIndex )
	weaponToDrop.SetCamo( camoIndex )
	if( isUnlimitedAmmo && !isInfiniteClip )
	{
		try{ weaponToDrop.SetWeaponPrimaryClipCount( clipLeft ) }
		catch(ex){}
	}
	else
	{
		try
		{ 
			weaponToDrop.SetWeaponPrimaryClipCount( clipLeft )
			weaponToDrop.SetWeaponPrimaryAmmoCount( ammoLeft )
		} // maybe only charge rifle don't have this
		catch(ex){}
	}
	if( hasBurnMod && ampDurationLeft >= 0 ) // still have amped weapons timer left...
		thread AmpedWeaponsDurationThink( weaponToDrop, ampDurationLeft ) // manually remove overtimed burnmod

	// vanilla more like this?
	//velocity.z = 0
	//velocity *= 0.8

	vector velocity = player.GetVelocity()

	vector forceVec = DamageInfo_GetDamageForce( damageInfo )
	float forceMag = Length( forceVec )
	forceVec = Normalize( forceVec )
	const float MAX_FORCE = 30000
	if ( forceMag > MAX_FORCE )
		forceMag = MAX_FORCE

	// these will not leave player's full body or trigger knockback animations
    if ( DamageInfo_GetCustomDamageType( damageInfo ) & 
		( DF_GIB | DF_DISSOLVE | DF_RAGDOLL | DF_KNOCK_BACK | DF_MELEE | DF_TITAN_STEP ) ) 
	{
		velocity.z = 0
		velocity *= 0.2
		velocity += forceVec * forceMag
	}
	else
	{
		velocity.z = 0
		velocity *= 0.8
		velocity += forceVec * forceMag
	}

	PutEntityInSafeSpot( weapon, player, null, player.GetOrigin(), weapon.GetOrigin() )
	weaponToDrop.SetVelocity( velocity )

	return weapon
}

void function AmpedWeaponsDurationThink( entity weapon, float timerLeft )
{
	weapon.EndSignal( "OnDestroy" )

	// needed to display amped weapon time left
	weapon.SetScriptFlags0( weapon.GetScriptFlags0() | WEAPONFLAG_AMPED )
	weapon.SetScriptTime0( Time() + timerLeft )

	wait timerLeft

	string prefix = "burn_mod"
	foreach( string mod in weapon.GetMods() )
	{
		if( mod.find( prefix ) == 0 ) // found burn mod!
			weapon.RemoveMod( mod )
	}
	weapon.SetScriptFlags0( weapon.GetScriptFlags0() & ~WEAPONFLAG_AMPED )
}

void function HackedDeath_PlayerRecoverFrom( entity player )
{
	if ( !player.s.hackedDeath ) // player not hacked death yet!
		return
	player.s.hackedDeath = false
	//player.kv.contents = (int(player.kv.contents) & ~CONTENTS_NOGRAPPLE) // grapple now handling in callbacks  // remove unable to be grappled content
	player.Signal( "RecoverFromHackedDeath" ) // signal this
	player.kv.VisibilityFlags = ENTITY_VISIBLE_TO_EVERYONE
	player.ClearInvulnerable()
	player.kv.CollisionGroup = TRACE_COLLISION_GROUP_PLAYER
	if ( GetCurrentPlaylistVarInt( "no_pilot_collision", 0 ) == 1 )
		player.kv.CollisionGroup = TRACE_COLLISION_GROUP_BLOCK_WEAPONS
	player.Solid()
	player.SetNoTarget( false )
	player.SetNoTargetSmartAmmo( false )
	ShowName( player )
	DeployAndEnableWeapons( player )
	//StopPlayerWoundedSound( player ) // doing a loop now
	// fuck you respawn why leaving a annying death sound
	RemoveCinematicFlag( player, CE_FLAG_HIDE_MAIN_HUD ) // HackedDeath_PlayerStart() has removed this
}

void function HackedDeath_PlayerRealDeath( entity player, var damageInfo )
{
	if( !file.hackedDeathEnabled )
		return

	if( DamageInfo_GetDamageSourceIdentifier( damageInfo ) == damagedef_despawn ) // killed by purpose
		return

	player.s.hackedDeath = true // ensure this
}

void function HackedDeath_SetEnabled( bool enabled )
{
	file.hackedDeathEnabled = enabled
	//SetWeaponDropsEnabled( enabled ) // bind together
	Wargames_SetPlayerDissolveDisabled( enabled ) // bind together
}

bool function HackedDeath_IsEnabled()
{
	return file.hackedDeathEnabled
}

bool function HackedDeath_IsPlayerHackedDeathed( entity player )
{
	if( !player.IsPlayer() )
		return false
	if( !( "hackedDeath" in player.s ) )
		return false
	return expect bool( player.s.hackedDeath )
}

void function HackedDeath_SetFakeBodySilence( bool silence )
{
	file.fakeBodySilence = silence
}

void function HackedDeath_SetDeathEffectEnable( bool enable )
{
	file.deathEffectEnable = enable
}
