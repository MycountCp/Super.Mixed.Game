
void function MainFunc_Init()
{
    // 在eGameState.Playing( 即游戏开始时 )调用StartWaveStateLoop()函数
    AddCallback_GameStateEnter( eGameState.Playing, StartWaveStateLoop )
}


void function OnPlayerDealDamage( entity victim, var damageInfo )
{
    // 核心增益

    if ( file.titanShieldRegen )
    {
        //增伤
    }
}

void function StartWaveStateLoop()
{
    // 在该函数里thread进入同名的函数，thread即开始新的线程使执行可以同时进行
    thread StartWaveStateLoop_Threaded() 
}

void function StartWaveStateLoop_Threaded()
{
    int lastWaveState // 用于存上一tick里的波次状态，需要写在while外面，以防下一次循环开始时被清空
    bool firstLoop = true
    while ( true )
    {
        int currentWaveState = GetGlobalNetInt( "FD_waveState" ) // 本tick的波次状态
        bool waveStateChanged = currentWaveState != lastWaveState // 波次状态是否改变
        if ( currentWaveState == WAVE_STATE_BREAK )
        {
            if ( waveStateChanged && !firstLoop ) // 如果波次改变且不为第一次循环
            {
                int waveCount = GetGlobalNetInt( "FD_currentWave" ) // 获取当前波次
                switch ( waveCount ) // 根据波次播送信息
                {

                }
            }
        }

        firstLoop = false // 第一次循环已结束
        lastWaveState = GetGlobalNetInt( "FD_waveState" ) // 更新本tick的波次状态

        WaitFrame() // 等待1tick。ttf的服务器脚本tickrate默认是10，这里会等到下一个tick开始(0.1s)
    }
}

void function SendMessageToAllPlayers( string title, string subtitle, vector color, int priority, int style )
{
    foreach ( entity player in GetPlayerArray() )
        NSSendAnnouncementMessageToPlayer( player, title, subtitle, color, priority, style )
}


void function QuickAnnouncement_Threaded()
{
    string lastMsg = ""
    while ( true )
    {
        string curMsg = GetConVarString( "quick_announce" )
        if ( lastMsg != curMsg )
        {
            ... // 消息函数
            SetConVarString( "quick_announce", "" )
        }

        WaitFrame()
    }
}

void function QuickAnnouncement_Threaded()
{
    while ( true )
    {
        if ( GetConVarBool( "quick_announce" ) )
        {
            ... // 消息函数，发送固定消息
            GetConVarBool( "quick_announce", false )
        }

        WaitFrame()
    }
}