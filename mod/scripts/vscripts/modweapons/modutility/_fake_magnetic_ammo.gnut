global function FAKE_Magnetic_ammo_Init

global function GiveProjectileFakeMagnetic

const float FAKE_MAGNETIC_RANGE_RADIUS = 50
const float FAKE_MAGNETIC_FORCE = 500
const float FAKE_MAGNETIC_FORCE_NPC = 1000

void function FAKE_Magnetic_ammo_Init()
{
    // function WaitFrame() has been changed, modifying script_server_fps won't break game behavior
    RegisterSignal( "StartFakeMagnetic" )
    RegisterSignal( "EndFakeMagnetic" )
}

void function GiveProjectileFakeMagnetic( entity projectile, float magneticRadius = FAKE_MAGNETIC_RANGE_RADIUS, bool heavyArmorOnly = false, string magneticSound = "Explo_MGL_MagneticAttract" )
{
    thread FakeMagneticThink( projectile, magneticRadius, heavyArmorOnly, magneticSound )
}

void function FakeMagneticThink( entity projectile, float magneticRadius, bool heavyArmorOnly, string magneticSound )
{
    projectile.Signal( "StartFakeMagnetic" )
    projectile.EndSignal( "OnDestroy" )
    projectile.EndSignal( "StartFakeMagnetic" )
    projectile.EndSignal( "EndFakeMagnetic" )

    // don't change these
    float baseGravity = float( projectile.kv.gravity )
    entity owner = projectile.GetOwner() // may need IsValid() check for each call
    RadiusDamageData radiusDamageData = GetRadiusDamageDataFromProjectile( projectile, owner )
    float explosionInnerRadius = radiusDamageData.explosionInnerRadius

    bool firstLoop = true
    bool foundTarget = false
    entity target = null
    while( true )
    {
        if( !firstLoop )
            WaitFrame( true ) // modified WaitFrame(). ignores fps limit, running with 60fps
        else
            firstLoop = false
        if( foundTarget )
        {
            if( !IsValid( target ) || !IsAlive( target ) )
            {
                foundTarget = false
                continue
            }
            if( !CheckMagneticTarget( target, projectile ) )
            {
                foundTarget = false
                continue
            }
            projectile.kv.gravity = 0.0001
            vector desiredVelocity = CalculateTargetVector( target, projectile )
            projectile.SetVelocity( desiredVelocity )

            // try explode if close enough, only for friendlyFire situations, avoid making projectiles rolling around friendlies
            // this will make projectiles only deal explosion damage, which mostly much lower than normal damages
            if( FriendlyFire_IsEnabled() && target.GetTeam() == projectile.GetTeam() )
            {
                if( MagneticProjectileTryExplode( projectile, target, explosionInnerRadius, magneticSound ) )
                    return // successfully exploded
            }
        }
        else
        {
            projectile.kv.gravity = baseGravity
            array<entity> entArray
            array<entity> enemyPlayers
            if( FriendlyFire_IsEnabled() ) // now support friendlyFire
            {
                enemyPlayers = GetPlayerArray_Alive()
                enemyPlayers.removebyvalue( owner )
            }
            else
                enemyPlayers = GetPlayerArrayOfEnemies_Alive( projectile.GetTeam() )
            if( enemyPlayers.len() > 0 )
            {
                foreach( entity player in enemyPlayers )
                    entArray.append( player )
            }
            array<entity> enemyNPCs
            if( FriendlyFire_IsEnabled() ) // now support friendlyFire
                enemyNPCs = GetNPCArray()
            else
                enemyNPCs = GetNPCArrayOfEnemies( projectile.GetTeam() )
            if( enemyNPCs.len() > 0 )
            {
                foreach( entity npc in enemyNPCs )
                    entArray.append( npc )
            }
            if( entArray.len() == 0 )
                continue
            entity closestEnt = GetClosest( entArray, projectile.GetOrigin(), magneticRadius )
            if( !IsValid( closestEnt ) )
                continue
            if( heavyArmorOnly && closestEnt.GetArmorType() != ARMOR_TYPE_HEAVY )
                continue
            bool canSetTarget = CheckMagneticTarget( closestEnt, projectile )
            if( !canSetTarget )
                continue
            foundTarget = true
            target = closestEnt
        }
    }
}

bool function CheckMagneticTarget( entity target, entity projectile )
{
    if( !IsValid( target ) || !IsValid( projectile ) )
        return false
    if( target.IsPhaseShifted() )
        return false
    
    vector targetPos = GetTargetPos( target )
    vector projPos = projectile.GetOrigin()

    TraceResults traceResult = TraceLine( targetPos, projPos, [target, projectile], (TRACE_MASK_SHOT | CONTENTS_BLOCKLOS), TRACE_COLLISION_GROUP_NONE )
    if( traceResult.hitEnt == null )
        return true

    return false
}

vector function CalculateTargetVector( entity target, entity projectile )
{
    vector targetPos = GetTargetPos( target )
    vector projPos = projectile.GetOrigin()
    vector posDiffer = targetPos - projPos
    vector moveAng = VectorToAngles( posDiffer )
    vector moveVec = AnglesToForward( moveAng ) * ( target.IsPlayer() ? FAKE_MAGNETIC_FORCE : FAKE_MAGNETIC_FORCE_NPC )
    return moveVec
}

vector function GetTargetPos( entity target )
{
    vector targetPos = target.GetOrigin() // if no attachments valid, return base value

    // normally aim to chest
    int attachID = target.LookupAttachment( "CHESTFOCUS" )
    if( attachID > 0 )
        targetPos = target.GetAttachmentOrigin( attachID )
    else if( IsHumanSized( target ) ) // no chest attachment, is humansized?
        targetPos.z += ( target.EyePosition().z - target.GetOrigin().z ) * 0.7 // this might get humansized target's chest?
    else if( target.IsNPC() ) // no attachment, isn't humansize, still a npc
        targetPos.z += ( target.EyePosition().z - target.GetOrigin().z ) * 0.5 // this might get target's center part?

    //print( targetPos.z )
    
    return targetPos
}

// this will make projectiles only deal explosion damage, which mostly much lower than normal damages
bool function MagneticProjectileTryExplode( entity projectile, entity target, float innerRadius, string magneticSound )
{
    if( !CheckMagneticTarget( projectile, target ) ) // has something blocking
        return false

    float explosionDist = innerRadius > 5 ? innerRadius - 5 : innerRadius
    if( Distance( projectile.GetOrigin(), GetTargetPos( target ) ) > explosionDist ) // not close enough
        return false
    
    // do explosions to avoid making projectiles rolling around target
    switch( projectile.GetClassName() )
    {
        case "grenade":
            if( target.IsPlayer() ) // do sound for grenades
                EmitSoundOnEntityOnlyToPlayer( projectile, target, magneticSound )
            projectile.GrenadeExplode( projectile.GetForwardVector() )
            return true
        case "rpg_missile":
            projectile.MissileExplode()
            projectile.Destroy()
            return true
    }
    // don't know what to do with bolts
    return false
}
